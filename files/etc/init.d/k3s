#!/bin/sh /etc/rc.common

START=99
STOP=20

PIDFILE=/tmp/run/k3s.pid
EXEC="/usr/bin/k3s"
K3S_NAME="k3s-server"

EXTRA_COMMANDS="uciadd ucidel k3s_install k3s_remove"
EXTRA_HELP=<<EOF
        uciadd Help for the uciadd <interface> <device> <zone> Add docker bridge configuration to network and firewall uci config
        ucidel Help for the ucidel <interface> <device> <zone> Delete docker bridge configuration from network and firewall uci config
        k3s_install Help for the k3s_install command
        k3s_remove Help for the k3s_remove command
EOF

boot() {
  uciadd
  alias kubectl='k3s kubectl'
}

uci_quiet() {
  uci -q "${@}" >/dev/null
}

uciadd() {
  local iface="${1}"
  local device="${2}"
  local zone="${3}"

  [ -z "${iface}" ] && {
    iface="k3s"
    device="cni0"
    zone="k3s"
  }

  # Add network interface
  if ! uci_quiet get network.${iface}; then
    logger -t "k3s-init" -p notice "Adding interface '${iface}' to network config"
    uci_quiet add network interface
    uci_quiet rename network.@interface[-1]="${iface}"
    uci_quiet set network.@interface[-1].device="${device}"
    uci_quiet set network.@interface[-1].proto="none"
    uci_quiet set network.@interface[-1].auto="0"
    uci_quiet commit network
  fi

  # Add firewall zone
  if ! uci_quiet get firewall.${zone}; then
    logger -t "k3s-init" -p notice "Adding firewall zone '${zone}' to firewall config"
    uci_quiet add firewall zone
    uci_quiet rename firewall.@zone[-1]="${zone}"
    uci_quiet set firewall.@zone[-1].input="ACCEPT"
    uci_quiet set firewall.@zone[-1].output="ACCEPT"
    uci_quiet set firewall.@zone[-1].forward="ACCEPT"
    uci_quiet set firewall.@zone[-1].name="${zone}"
    uci_quiet commit firewall
  fi

  # Add interface to firewall zone
  if uci_quiet get firewall.${zone}; then
    uci_quiet del_list firewall.${zone}.network="${iface}"
    uci_quiet add_list firewall.${zone}.network="${iface}"
    uci_quiet commit firewall
  fi

  reload_config
}

ucidel() {
  local iface="${1}"
  local device="${2}"
  local zone="${3}"

  [ -z "${iface}" ] && {
    iface="k3s"
    device="cni0"
    zone="k3s"
  }

  # Remove network interface
  if uci_quiet get network.${iface}; then
    logger -t "dockerd-init" -p notice "Deleting interface '${iface}' from network config"
    uci_quiet delete network.${iface}
    uci_quiet commit network
  fi

  # Remove interface from firewall zone
  if uci_quiet get firewall.${zone}; then
    logger -t "dockerd-init" -p notice "Deleting network interface '${iface}' in zone '${zone}' from firewall config"
    uci_quiet del_list firewall.${zone}.network="${iface}"
    uci_quiet commit firewall
    # Remove Firewall zone if network is empty
    if ! uci_quiet get firewall.${zone}.network; then
      logger -t "dockerd-init" -p notice "Deleting firewall zone '${zone}' from firewall config"
      uci_quiet delete firewall.${zone}
    fi
    uci_quiet commit firewall
  fi

  reload_config
}

ensure_cgroup_mount() {
  # Unmount /sys/fs/cgroup if mounted as cgroup
  grep -q ' /sys/fs/cgroup cgroup' /proc/self/mounts && umount /sys/fs/cgroup

  grep -q ' /sys/fs/cgroup tmpfs' /proc/self/mounts \
    || mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroup

  for sys in $(awk '!/^#/ { if ($4 == 1) print $1 }' /proc/cgroups); do
    mnt="/sys/fs/cgroup/$sys"
    grep -q "cgroup $mnt " /proc/self/mounts && continue
    mkdir -p "$mnt"
    mount -n -t cgroup -o $sys cgroup "$mnt"
  done
}

start() {
  #ensure_cgroup_mount
  if ! uci_quiet get k3s.globals.opts; then
    start-stop-daemon -S -b -x "$EXEC" -m -p "$PIDFILE" \
    -- server --data-dir $(uci get k3s.globals.data_root)
  else
    start-stop-daemon -S -b -x "$EXEC" -m -p "$PIDFILE" \
    -- server $(uci get k3s.globals.opts) \
    --data-dir $(uci get k3s.globals.data_root)
  fi
}

stop() {
  start-stop-daemon -K -p "$PIDFILE" -n "$K3S_NAME" || true
}

k3s_install() {
  echo "k3s starting install"
  if uci_quiet get k3s.globals.data_root; then
    if [ ! -d "$(uci get k3s.globals.data_root)" ];then
      mkdir -p $(uci get k3s.globals.data_root)
    fi
  fi
  uciadd
}

k3s_remove() {
  echo "k3s starting remove"
  if uci_quiet get k3s.globals.data_root; then
    if [ -d "$(uci get k3s.globals.data_root)" ];then
      rm -rf $(uci get k3s.globals.data_root)
    fi
  fi
  ucidel
}